// <auto-generated />
using System;
using Manga.Infrastructure.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Manga.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231201203246_LikeFeature")]
    partial class LikeFeature
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Manga.Domain.Entities.MangaChapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChapterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MangaTitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MangaTitleId");

                    b.ToTable("MangaChapters");
                });

            modelBuilder.Entity("Manga.Domain.Entities.MangaPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MangaChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MangaChapterId");

                    b.ToTable("MangaPages");
                });

            modelBuilder.Entity("Manga.Domain.Entities.MangaTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MangaTitles");
                });

            modelBuilder.Entity("Manga.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a2c4e8b-9d1f-4a7b-a0c8-8d9b6f2e3a14"),
                            CreatedDate = new DateTime(2023, 12, 1, 21, 32, 46, 582, DateTimeKind.Local).AddTicks(343),
                            Email = "admin@admin.com",
                            Password = "$2a$11$mawYOygVnqZ.lWJupc0yG.3O8BxOsp188BGb57xbQh7ZYcCL/OBwq",
                            Role = "Admin",
                            UpdatedDate = new DateTime(2023, 12, 1, 21, 32, 46, 582, DateTimeKind.Local).AddTicks(405),
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Manga.Domain.Entities.UserChapter", b =>
                {
                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChapterId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChapters");
                });

            modelBuilder.Entity("Manga.Domain.Entities.MangaChapter", b =>
                {
                    b.HasOne("Manga.Domain.Entities.MangaTitle", "MangaTitle")
                        .WithMany("Chapters")
                        .HasForeignKey("MangaTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MangaTitle");
                });

            modelBuilder.Entity("Manga.Domain.Entities.MangaPage", b =>
                {
                    b.HasOne("Manga.Domain.Entities.MangaChapter", "MangaChapter")
                        .WithMany("Pages")
                        .HasForeignKey("MangaChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MangaChapter");
                });

            modelBuilder.Entity("Manga.Domain.Entities.UserChapter", b =>
                {
                    b.HasOne("Manga.Domain.Entities.MangaChapter", "MangaChapter")
                        .WithMany("UserChapters")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manga.Domain.Entities.User", "User")
                        .WithMany("UserChapters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MangaChapter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Manga.Domain.Entities.MangaChapter", b =>
                {
                    b.Navigation("Pages");

                    b.Navigation("UserChapters");
                });

            modelBuilder.Entity("Manga.Domain.Entities.MangaTitle", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("Manga.Domain.Entities.User", b =>
                {
                    b.Navigation("UserChapters");
                });
#pragma warning restore 612, 618
        }
    }
}
