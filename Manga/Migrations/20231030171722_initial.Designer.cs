// <auto-generated />
using System;
using Manga.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Manga.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231030171722_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Manga.Models.MangaChapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChapterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MangaTitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedName")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MangaTitleId");

                    b.ToTable("MangaChapters");
                });

            modelBuilder.Entity("Manga.Models.MangaPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MangaChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedName")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MangaChapterId");

                    b.ToTable("MangaPages");
                });

            modelBuilder.Entity("Manga.Models.MangaTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedName")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MangaTitles");
                });

            modelBuilder.Entity("Manga.Models.MangaChapter", b =>
                {
                    b.HasOne("Manga.Models.MangaTitle", "MangaTitle")
                        .WithMany("Chapters")
                        .HasForeignKey("MangaTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MangaTitle");
                });

            modelBuilder.Entity("Manga.Models.MangaPage", b =>
                {
                    b.HasOne("Manga.Models.MangaChapter", "MangaChapter")
                        .WithMany("Pages")
                        .HasForeignKey("MangaChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MangaChapter");
                });

            modelBuilder.Entity("Manga.Models.MangaChapter", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("Manga.Models.MangaTitle", b =>
                {
                    b.Navigation("Chapters");
                });
#pragma warning restore 612, 618
        }
    }
}
